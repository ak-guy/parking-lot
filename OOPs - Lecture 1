#include<bits/stdc++.h>
using namespace std;

class Hero{
private:
	int health;
	char level;

public:
	char *name;
	static int timeToComplete; // belong to class hence can be used without creating an object
	// new constructer
	Hero(){
		cout << "Constructor Called " << endl;
		name = new char[100];
	}

	// new parameterized constructer
	Hero(int health, char level){
		cout << "Parametrized Constructor called " << endl;
		this->health = health;
		this->level = level;
	}

	int getHealth(){
		return health;
	}

	void setHealth(int health){
		this->health =  health;
	}

	char getLevel(){
		return level;
	}

	void setLevel(char level){
		this->level = level;
	}

	void setName(char name[]){
		strcpy(this->name, name);
	}

	// copy constructor
	Hero(Hero &temp){
		char *ch = new char[strlen(temp.name) + 1];
		strcpy(ch, temp.name);
		this->name = ch;

		this->health = temp.health;
		this->level = temp.level;
	}

	void print(){
		cout << "Name : " << this->name << "\t"; 
		cout << "Health : " << this->health << "\t";
		cout<< "Level : " << this->level << endl;
	}
	// static function can only access static members and can be initialized without creating object
	static int random(){
		return timeToComplete;  // does not have 'this' keyword
	}

	// destructor 
	~Hero(){
		cout << "destructer called " << endl;
	}

};

int Hero::timeToComplete = 5;

int main() {
	cout << Hero::random() << endl;


	// cout << Hero::timeToComplete << endl;
	// Hero hero1;
	// cout << hero1.timeToComplete << endl;

	// Hero hero2;
	// hero2.timeToComplete = 10;
	// cout << hero1.timeToComplete << endl;
	// cout << hero2.timeToComplete << endl;

	


	// Hero hero;
	// hero.setHealth(123);
	// hero.setLevel('A');

	// char name[6] = "ARPIT";
	// hero.setName(name);
	// hero.print();

	// Hero newHero(hero);
	// newHero.print();

	// hero.name[0] = 'S';
	// hero.print();
	// newHero.print();
}
